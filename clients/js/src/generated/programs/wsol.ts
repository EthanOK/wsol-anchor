/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedApproveTransferWethInstruction,
  type ParsedChangeAuthorityInstruction,
  type ParsedCreateToken2022Instruction,
  type ParsedDepositInstruction,
  type ParsedInitializeInstruction,
  type ParsedTransferWethInstruction,
  type ParsedWithdrawInstruction,
  type ParsedWithdrawOnlyAuthorityInstruction,
} from '../instructions';

export const WSOL_PROGRAM_ADDRESS =
  'wso1PkvZVRh2KSdrhBeFFd15E36ggcwuwp8qmdqDVjn' as Address<'wso1PkvZVRh2KSdrhBeFFd15E36ggcwuwp8qmdqDVjn'>;

export enum WsolAccount {
  InitData,
}

export function identifyWsolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): WsolAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 192, 88, 6, 90, 72, 136, 232])
      ),
      0
    )
  ) {
    return WsolAccount.InitData;
  }
  throw new Error(
    'The provided account could not be identified as a wsol account.'
  );
}

export enum WsolInstruction {
  ApproveTransferWeth,
  ChangeAuthority,
  CreateToken2022,
  Deposit,
  Initialize,
  TransferWeth,
  Withdraw,
  WithdrawOnlyAuthority,
}

export function identifyWsolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): WsolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([222, 34, 250, 159, 150, 149, 209, 164])
      ),
      0
    )
  ) {
    return WsolInstruction.ApproveTransferWeth;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 106, 66, 104, 99, 118, 145, 88])
      ),
      0
    )
  ) {
    return WsolInstruction.ChangeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 75, 16, 217, 248, 141, 155, 169])
      ),
      0
    )
  ) {
    return WsolInstruction.CreateToken2022;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return WsolInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return WsolInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([52, 2, 229, 73, 74, 104, 13, 191])
      ),
      0
    )
  ) {
    return WsolInstruction.TransferWeth;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return WsolInstruction.Withdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 90, 123, 103, 58, 190, 219, 97])
      ),
      0
    )
  ) {
    return WsolInstruction.WithdrawOnlyAuthority;
  }
  throw new Error(
    'The provided instruction could not be identified as a wsol instruction.'
  );
}

export type ParsedWsolInstruction<
  TProgram extends string = 'wso1PkvZVRh2KSdrhBeFFd15E36ggcwuwp8qmdqDVjn',
> =
  | ({
      instructionType: WsolInstruction.ApproveTransferWeth;
    } & ParsedApproveTransferWethInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.ChangeAuthority;
    } & ParsedChangeAuthorityInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.CreateToken2022;
    } & ParsedCreateToken2022Instruction<TProgram>)
  | ({
      instructionType: WsolInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.TransferWeth;
    } & ParsedTransferWethInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>)
  | ({
      instructionType: WsolInstruction.WithdrawOnlyAuthority;
    } & ParsedWithdrawOnlyAuthorityInstruction<TProgram>);
