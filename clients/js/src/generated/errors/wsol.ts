/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { WSOL_PROGRAM_ADDRESS } from '../programs';

/** InvalidAmount: Invalid amount */
export const WSOL_ERROR__INVALID_AMOUNT = 0x1770; // 6000
/** TransferFailed: Transfer failed */
export const WSOL_ERROR__TRANSFER_FAILED = 0x1771; // 6001
/** WithdrawFailed: Withdraw failed */
export const WSOL_ERROR__WITHDRAW_FAILED = 0x1772; // 6002
/** DepositFailed: Deposit failed */
export const WSOL_ERROR__DEPOSIT_FAILED = 0x1773; // 6003
/** OnlyAuthority: Only authority */
export const WSOL_ERROR__ONLY_AUTHORITY = 0x1774; // 6004

export type WsolError =
  | typeof WSOL_ERROR__DEPOSIT_FAILED
  | typeof WSOL_ERROR__INVALID_AMOUNT
  | typeof WSOL_ERROR__ONLY_AUTHORITY
  | typeof WSOL_ERROR__TRANSFER_FAILED
  | typeof WSOL_ERROR__WITHDRAW_FAILED;

let wsolErrorMessages: Record<WsolError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  wsolErrorMessages = {
    [WSOL_ERROR__DEPOSIT_FAILED]: `Deposit failed`,
    [WSOL_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [WSOL_ERROR__ONLY_AUTHORITY]: `Only authority`,
    [WSOL_ERROR__TRANSFER_FAILED]: `Transfer failed`,
    [WSOL_ERROR__WITHDRAW_FAILED]: `Withdraw failed`,
  };
}

export function getWsolErrorMessage(code: WsolError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (wsolErrorMessages as Record<WsolError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isWsolError<TProgramErrorCode extends WsolError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    WSOL_PROGRAM_ADDRESS,
    code
  );
}
