/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const INIT_DATA_DISCRIMINATOR = new Uint8Array([
  245, 192, 88, 6, 90, 72, 136, 232,
]);

export function getInitDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_DATA_DISCRIMINATOR);
}

export type InitData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  bump: number;
  wethbump: number;
  authority: Address;
};

export type InitDataArgs = {
  amount: number | bigint;
  bump: number;
  wethbump: number;
  authority: Address;
};

export function getInitDataEncoder(): FixedSizeEncoder<InitDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['wethbump', getU8Encoder()],
      ['authority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_DATA_DISCRIMINATOR })
  );
}

export function getInitDataDecoder(): FixedSizeDecoder<InitData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['wethbump', getU8Decoder()],
    ['authority', getAddressDecoder()],
  ]);
}

export function getInitDataCodec(): FixedSizeCodec<InitDataArgs, InitData> {
  return combineCodec(getInitDataEncoder(), getInitDataDecoder());
}

export function decodeInitData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<InitData, TAddress>;
export function decodeInitData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<InitData, TAddress>;
export function decodeInitData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<InitData, TAddress> | MaybeAccount<InitData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInitDataDecoder()
  );
}

export async function fetchInitData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<InitData, TAddress>> {
  const maybeAccount = await fetchMaybeInitData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInitData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<InitData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInitData(maybeAccount);
}

export async function fetchAllInitData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<InitData>[]> {
  const maybeAccounts = await fetchAllMaybeInitData(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInitData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<InitData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeInitData(maybeAccount));
}

export function getInitDataSize(): number {
  return 50;
}
