/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { WSOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountStorageAccount extends string | AccountMeta<string> = string,
  TAccountWsolMint extends string | AccountMeta<string> = string,
  TAccountWethMetadata extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountStorageAccount extends string
        ? WritableAccount<TAccountStorageAccount>
        : TAccountStorageAccount,
      TAccountWsolMint extends string
        ? WritableAccount<TAccountWsolMint>
        : TAccountWsolMint,
      TAccountWethMetadata extends string
        ? WritableAccount<TAccountWethMetadata>
        : TAccountWethMetadata,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = { discriminator: ReadonlyUint8Array };

export type InitializeInstructionDataArgs = {};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountSigner extends string = string,
  TAccountStorageAccount extends string = string,
  TAccountWsolMint extends string = string,
  TAccountWethMetadata extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  storageAccount?: Address<TAccountStorageAccount>;
  wsolMint?: Address<TAccountWsolMint>;
  wethMetadata: Address<TAccountWethMetadata>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeInstructionAsync<
  TAccountSigner extends string,
  TAccountStorageAccount extends string,
  TAccountWsolMint extends string,
  TAccountWethMetadata extends string,
  TAccountTokenProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountSigner,
    TAccountStorageAccount,
    TAccountWsolMint,
    TAccountWethMetadata,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount,
    TAccountWsolMint,
    TAccountWethMetadata,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: true },
    wethMetadata: { value: input.wethMetadata ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.storageAccount.value) {
    accounts.storageAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 111, 114, 97, 103, 101, 95, 112, 100, 97])
        ),
      ],
    });
  }
  if (!accounts.wsolMint.value) {
    accounts.wsolMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([119, 115, 111, 108, 95, 109, 105, 110, 116])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.storageAccount),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.wethMetadata),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount,
    TAccountWsolMint,
    TAccountWethMetadata,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >);
}

export type InitializeInput<
  TAccountSigner extends string = string,
  TAccountStorageAccount extends string = string,
  TAccountWsolMint extends string = string,
  TAccountWethMetadata extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  storageAccount: Address<TAccountStorageAccount>;
  wsolMint: Address<TAccountWsolMint>;
  wethMetadata: Address<TAccountWethMetadata>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeInstruction<
  TAccountSigner extends string,
  TAccountStorageAccount extends string,
  TAccountWsolMint extends string,
  TAccountWethMetadata extends string,
  TAccountTokenProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountSigner,
    TAccountStorageAccount,
    TAccountWsolMint,
    TAccountWethMetadata,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountStorageAccount,
  TAccountWsolMint,
  TAccountWethMetadata,
  TAccountTokenProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: true },
    wethMetadata: { value: input.wethMetadata ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.storageAccount),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.wethMetadata),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount,
    TAccountWsolMint,
    TAccountWethMetadata,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    storageAccount: TAccountMetas[1];
    wsolMint: TAccountMetas[2];
    wethMetadata: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    tokenMetadataProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      storageAccount: getNextAccount(),
      wsolMint: getNextAccount(),
      wethMetadata: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
