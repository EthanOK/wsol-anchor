/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { WSOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_ONLY_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  13, 90, 123, 103, 58, 190, 219, 97,
]);

export function getWithdrawOnlyAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_ONLY_AUTHORITY_DISCRIMINATOR
  );
}

export type WithdrawOnlyAuthorityInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountStorageAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStorageAccount extends string
        ? WritableAccount<TAccountStorageAccount>
        : TAccountStorageAccount,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawOnlyAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type WithdrawOnlyAuthorityInstructionDataArgs = {};

export function getWithdrawOnlyAuthorityInstructionDataEncoder(): FixedSizeEncoder<WithdrawOnlyAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_ONLY_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getWithdrawOnlyAuthorityInstructionDataDecoder(): FixedSizeDecoder<WithdrawOnlyAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawOnlyAuthorityInstructionDataCodec(): FixedSizeCodec<
  WithdrawOnlyAuthorityInstructionDataArgs,
  WithdrawOnlyAuthorityInstructionData
> {
  return combineCodec(
    getWithdrawOnlyAuthorityInstructionDataEncoder(),
    getWithdrawOnlyAuthorityInstructionDataDecoder()
  );
}

export type WithdrawOnlyAuthorityAsyncInput<
  TAccountAuthority extends string = string,
  TAccountStorageAccount extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  storageAccount?: Address<TAccountStorageAccount>;
};

export async function getWithdrawOnlyAuthorityInstructionAsync<
  TAccountAuthority extends string,
  TAccountStorageAccount extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: WithdrawOnlyAuthorityAsyncInput<
    TAccountAuthority,
    TAccountStorageAccount
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawOnlyAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStorageAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.storageAccount.value) {
    accounts.storageAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 111, 114, 97, 103, 101, 95, 112, 100, 97])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.storageAccount),
    ],
    data: getWithdrawOnlyAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawOnlyAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStorageAccount
  >);
}

export type WithdrawOnlyAuthorityInput<
  TAccountAuthority extends string = string,
  TAccountStorageAccount extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  storageAccount: Address<TAccountStorageAccount>;
};

export function getWithdrawOnlyAuthorityInstruction<
  TAccountAuthority extends string,
  TAccountStorageAccount extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: WithdrawOnlyAuthorityInput<TAccountAuthority, TAccountStorageAccount>,
  config?: { programAddress?: TProgramAddress }
): WithdrawOnlyAuthorityInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountStorageAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.storageAccount),
    ],
    data: getWithdrawOnlyAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawOnlyAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountStorageAccount
  >);
}

export type ParsedWithdrawOnlyAuthorityInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    storageAccount: TAccountMetas[1];
  };
  data: WithdrawOnlyAuthorityInstructionData;
};

export function parseWithdrawOnlyAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawOnlyAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { authority: getNextAccount(), storageAccount: getNextAccount() },
    data: getWithdrawOnlyAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
