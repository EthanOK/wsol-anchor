/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { WSOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHANGE_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  50, 106, 66, 104, 99, 118, 145, 88,
]);

export function getChangeAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANGE_AUTHORITY_DISCRIMINATOR
  );
}

export type ChangeAuthorityInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountStorageAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountStorageAccount extends string
        ? WritableAccount<TAccountStorageAccount>
        : TAccountStorageAccount,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  newAuthority: Address;
};

export type ChangeAuthorityInstructionDataArgs = { newAuthority: Address };

export function getChangeAuthorityInstructionDataEncoder(): FixedSizeEncoder<ChangeAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CHANGE_AUTHORITY_DISCRIMINATOR })
  );
}

export function getChangeAuthorityInstructionDataDecoder(): FixedSizeDecoder<ChangeAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newAuthority', getAddressDecoder()],
  ]);
}

export function getChangeAuthorityInstructionDataCodec(): FixedSizeCodec<
  ChangeAuthorityInstructionDataArgs,
  ChangeAuthorityInstructionData
> {
  return combineCodec(
    getChangeAuthorityInstructionDataEncoder(),
    getChangeAuthorityInstructionDataDecoder()
  );
}

export type ChangeAuthorityAsyncInput<
  TAccountSigner extends string = string,
  TAccountStorageAccount extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  storageAccount?: Address<TAccountStorageAccount>;
  newAuthority: ChangeAuthorityInstructionDataArgs['newAuthority'];
};

export async function getChangeAuthorityInstructionAsync<
  TAccountSigner extends string,
  TAccountStorageAccount extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: ChangeAuthorityAsyncInput<TAccountSigner, TAccountStorageAccount>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ChangeAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.storageAccount.value) {
    accounts.storageAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 111, 114, 97, 103, 101, 95, 112, 100, 97])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.storageAccount),
    ],
    data: getChangeAuthorityInstructionDataEncoder().encode(
      args as ChangeAuthorityInstructionDataArgs
    ),
    programAddress,
  } as ChangeAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount
  >);
}

export type ChangeAuthorityInput<
  TAccountSigner extends string = string,
  TAccountStorageAccount extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  storageAccount: Address<TAccountStorageAccount>;
  newAuthority: ChangeAuthorityInstructionDataArgs['newAuthority'];
};

export function getChangeAuthorityInstruction<
  TAccountSigner extends string,
  TAccountStorageAccount extends string,
  TProgramAddress extends Address = typeof WSOL_PROGRAM_ADDRESS,
>(
  input: ChangeAuthorityInput<TAccountSigner, TAccountStorageAccount>,
  config?: { programAddress?: TProgramAddress }
): ChangeAuthorityInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountStorageAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? WSOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    storageAccount: { value: input.storageAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.storageAccount),
    ],
    data: getChangeAuthorityInstructionDataEncoder().encode(
      args as ChangeAuthorityInstructionDataArgs
    ),
    programAddress,
  } as ChangeAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStorageAccount
  >);
}

export type ParsedChangeAuthorityInstruction<
  TProgram extends string = typeof WSOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    storageAccount: TAccountMetas[1];
  };
  data: ChangeAuthorityInstructionData;
};

export function parseChangeAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedChangeAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { signer: getNextAccount(), storageAccount: getNextAccount() },
    data: getChangeAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
